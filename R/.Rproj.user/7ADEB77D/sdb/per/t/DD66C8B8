{
    "collab_server" : "",
    "contents" : "---\ntitle: \"FRUBASE\"\noutput: html_notebook\n---\n\nJuly 2007. Freiburg. Nov 2007, Sevilla.\nRevision for v. 5 started in Sevilla, 17 Jan 2015.\n\n### Data input, etc.\n\nTry executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Cmd+Shift+Enter*. \n\n```{r dataset}\n# Get the data from my GitHub repository.\nrequire(downloader)\nlink = \"https://raw.githubusercontent.com/pedroj/frubase/master/frubase.txt\"\nfile = \"frubase.txt\"\nif(!file.exists(file)) download(link, file, mode = \"wb\")\nfrubase <- read.table(file, sep = \"\\t\", dec = \".\", \n                      header = TRUE, na.strings=\"NA\")\n\n```\n\nPrepare dataset.\n\n```{r data_edit, echo=TRUE}\n# Add column with species names to use in taxa checks.\nspecies<- paste(frubase$gen,frubase$sp,sep=\" \")\nfrubase<- data.frame(frubase[,1:6], species, frubase[,7:32])\n# str(frubase)\n\n```\n\n\n### Filtering \n\n```{r filter, echo=TRUE}\nrequire(dplyr)\nfrubase_df<- tbl_df(frubase)\nhead(frubase_df)\nglimpse(frubase_df)\n\nfrubase_df %>%\n        filter(gen== \"Vaccinium\") \n\nfilter(frubase_df, diam > 12.0)[,7]\n\nby_fam.diam <- group_by(frubase_df, fam)\nsummarise(by_fam.diam,\n                count = n(),\n                diam.avg = mean(diam, na.rm = TRUE),\n                diam.se = mean(diam, na.rm = TRUE))\n```\n\n### Taxa names check\n#### Cleanup list \n\nThere are many ways to resolve taxonomic names in `taxize`. Of course, the ideal name resolver will do the work behind the scenes for you so that you dont have to do things like fuzzy matching. There are a few services in taxize like this we can choose from: One is the Taxonomic Name Resolution Service from iPlant (see function `tnrs`).\n\n```{r cleanup, echo=TRUE, cache=TRUE}\n# The tnrs function accepts a vector of 1 or more\nmylist_tnrs <- tnrs(query=splist, getpost=\"POST\", source = \"iPlant_TNRS\")\n\n# Remove some fields\nmylist_tnrs <- mylist_tnrs[,!names(mylist_tnrs) %in%\n               c(\"matchedName\",\"annotations\",\"uri\")]\nmylist_tnrs_df<- tbl_df(mylist_tnrs)\n\nmylist_final <- as.character(mylist_tnrs$acceptedname)\n\n```\n\nNote the scores. They suggest that there were no perfect matches, but they were all very close, ranging from 0.77 to 0.99 (1 is the highest). \nLet's assume the names in the \"acceptedName\" column are correct (and they should be).\n\nHere is code to check a specific database:\n\n```{r select_source}\nsources <- gnr_datasources()\neol <- sources$id[sources$title == 'EOL'] #c('ncbi','itis','col','tropicos')\nout <- gnr_resolve(splist, data_source_ids=eol, stripauthority=TRUE)\nunique(out$results)\n\n```\n\n### Datasets and analyses \n```{r analyses, echo=TRUE}\nnfrubase<-frubase[,18:32]             # Numeric data only\n\n#-------------------------------------------------------------------------\n### Correlation matrices\nfrubcor <- cor(log(nfrubase)+1,use=\"pairwise\") # Full correlation matrix\nfrubmorphcor<- cor(log(nfrubase[,1:8])+1,use=\"pairwise\") # Morph correlation matrix\nfrubnutrcor<- cor(log(nfrubase[,9:15])+1,use=\"pairwise\") # Nutrient correlation matrix\n\n#-------------------------------------------------------------------------\n### Plots of correlation matrices\nlibrary(Hmisc)\nround(frubcor <- cor(log(nfrubase)+1, use=\"pairwise\"), 3)  # NOTE: pairwise\nround(frubmorphcor <- cor(log(nfrubase[,1:8])+1, use=\"pairwise\"), 3)  # NOTE: pairwise\nround(frubnutrcor <- cor(log(nfrubase[,9:15])+1, use=\"pairwise\"), 3)  # NOTE: pairwise\n### the heat maps of the correlation matrix\nheatmap(frubcor,symm = TRUE,margin=c(6,6),col=gray((32:0)/32))# with reorder()\nheatmap(frubmorphcor,symm = TRUE,margin=c(6,6),col=gray((32:0)/32))# with reorder()\nheatmap(frubnutrcor,symm = TRUE,margin=c(6,6),col=gray((32:0)/32))# with reorder()\n\n#---------------------------------------------------------------------------\n# Integration --- MORPHOLOGICAL MATRIX\n\tfeigen_morph<-eigen(frubmorphcor)\n\tfeigen_morph$values\nfintegr.morph<-var(feigen_morph$values)\nfintegr.morph\n# Relative integration\nfmm1<-(ncol(frubmorphcor)-1)/length(nfrubase[,1]) # Maximum expected variance\nfintegr.morph/ncol(frubmorphcor)\n\n#---------------------------------------------------------------------------\n# Integration --- NUTRIENT MATRIX\n\tfeigen_nutr<-eigen(frubnutrcor)\n\tfeigen_nutr$values\nfintegr.nutr<-var(feigen_nutr$values)\nfintegr.nutr\n# Relative integration\nfmm2<-(ncol(frubnutrcor)-1)/length(nfrubase[,9]) # Maximum expected variance\nfintegr.nutr/ncol(frubnutrcor)\n\n#---------------------------------------------------------------------------\n### Phylogenetic analyses\nnames(frubase)\nnames(nfrubase)\nhist(log(nfrubase[,1]+1))\ncorrel.frub<-correlogram.formula(log(frubase[,19])+1~cl/scl/ord/fam/gen,use=\"pairwise.complete.obs\")\n#---------------------------------------------------------------------------\n\n```\n\n\n\n\n\n\n",
    "created" : 1489078728243.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1405468392",
    "id" : "DD66C8B8",
    "lastKnownWriteTime" : 1489085176,
    "last_content_update" : 1489085176642,
    "path" : "~/Documents/Datos/Datasets/frubase/FRUBASE.Rmd",
    "project_path" : "FRUBASE.Rmd",
    "properties" : {
        "chunk_output_type" : "inline",
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}